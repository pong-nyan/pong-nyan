services:
  ssl-generator:
    container_name: ssl-generator
    build:
      context: ./secrets
    volumes:
      - ./secrets:/etc/ssl/certs
    restart: always

  nextjs:
    container_name: PN-frontend
    build:
      context: ./frontend # Next.js 프로젝트의 Dockerfile 경로
    env_file:
      - frontend/.env
    volumes:
      - ./frontend/src:/usr/src/app/src # 호스트 파일 시스템과 컨테이너를 마운트하여 코드 변경 사항을 반영
      - ./frontend/public:/usr/src/app/public
      - ./secrets:/usr/src/secrets
    networks:
      - pongnyan
    restart: always

  nginx:
    container_name: nginx
    image: nginx:stable-alpine3.17
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./secrets:/etc/ssl/
    depends_on:
      - nextjs
    networks:
      - pongnyan
    restart: always

  nestjs:
    container_name: PN-backend
    build:
      context: ./backend # Nest.js 프로젝트의 Dockerfile 경로
    env_file:
      - backend/.env
    volumes:
      - ./backend/src:/usr/src/app/src # 호스트 파일 시스템과 컨테이너를 마운트하여 코드 변경 사항을 반영
      - ./secrets:/usr/src/secrets
    networks:
      - pongnyan
    restart: always

  postgres:
    container_name: PN-database
    image: postgres:15.4-alpine3.18
    volumes:
      - ./database/data:/var/lib/postgresql/data
    env_file:
      - database/.env
    networks:
      - pongnyan

networks:
  pongnyan:
